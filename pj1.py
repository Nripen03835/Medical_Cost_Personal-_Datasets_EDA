# -*- coding: utf-8 -*-
"""pj1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZV3l9bHVIJd8kpK_NkA6tqzA-GcYz-ul
"""

import pandas as pd

import matplotlib.pyplot as plt # visualization

import seaborn as sns # visualization advance

x = pd.read_csv('/content/insurance.csv')
print(x)

x.head() # if you leave the bracket empty

x.head(10) # if you want any other number write inside the bracket

x.tail() # if you leave the bracket empty show last 5 dataset

x.tail(10) # if you want any other number write inside the bracket

x.sample() # if you leave the bracket empty show random dataset

x.sample(10) # if you want any other number write inside the bracket

x.info()

x.describe()

x.columns

print (x['age']) # column

plt.hist(x['age'], bins=8) # create histogram
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

plt.hist(x['bmi'], bins=8) # create histogram
plt.show()

a = ["Non Smoker","Smoker"]
plt.pie(x['smoker'].value_counts(), labels=a, autopct='%1.1f%%')
plt.legend(loc="upper right")
plt.show()

sns.histplot(x.age)
plt.title('Age Distribution')
plt.xlabel('Age')
plt.ylabel('Frequency')
plt.show()

sns.histplot(x.bmi, color='yellow')
plt.title('BMI Distribution')
plt.xlabel('BMI')
plt.ylabel('Frequency',size=10) # increase font size
plt.show()

# Create a count plot for 'sex' and 'smoker'
sns.countplot(data= x , x='sex', hue='smoker')

# Add labels and title for clarity
plt.xlabel('Sex')
plt.ylabel('Count')
plt.title('Count of Smokers by Sex')

# Display the plot
plt.show()

# Ensure 'children' column includes all categories 1, 2, 3, 4, 5
x['children'] = pd.Categorical(x['children'], categories=[1, 2, 3, 4, 5], ordered=True)

# Create the count plot again
sns.countplot(data=x, x='children')

# Display the plot
plt.title('Distribution of Children')
plt.xlabel('Number of Children')
plt.ylabel('Count')
plt.show()

# Create the count plot
sns.countplot(data=x, x='region')

# Display the plot
plt.title('Distribution of Region')
plt.xlabel('Region')
plt.ylabel('Count')
plt.show()